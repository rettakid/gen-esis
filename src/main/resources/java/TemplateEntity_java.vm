package ${classPackage};

import javax.persistence.*;
import java.util.List;
import org.hibernate.envers.Audited;
#foreach(${import} in ${imports})
${import}
#end

@Entity
@Audited
@Table(name = "${databaseName.originalName}_${classObject.name.originalName}")
public class ${classObject.name.parcelCaseName}Entity    {

#foreach(${variable} in ${classObject.variables})
#if(${variable.type.variableTypeEnum} == 'REF')
    #set($variableType = ${variable.type.javaName} + 'Entity')
#else
    #set($variableType = ${variable.type.javaName})
#end
    private ${variableType} ${variable.name.camelCaseName};
#end
#foreach(${reference} in ${classObject.references})
    private List<${reference.name.parcelCaseName}Entity> ${reference.name.camelCaseName}${reference.refName.parcelCaseName}s;
#end

#foreach(${variable} in ${classObject.variables})
#if (${variable.isPk})
    #set($id = '@Id
    ')
    #set($autoGen = '@GeneratedValue(strategy = GenerationType.IDENTITY)
    ')
#else
    #set($id = '')
    #set($autoGen = '')
#end
#if (${variable.nullity} == 'NOT_NULL')
    #set($nullity = ' , nullable=false')
#else
    #set($nullity = ' , nullable=true')
#end
#if (${variable.length})
    #set($length = ' , length='+${variable.length})
#else
    #set($length = '')
#end
#if (${variable.type.variableTypeEnum} == 'REF')
    #set($variableType = "${variable.type.javaName}Entity")
    #set($column = '@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="' + ${variable.orgName.originalName} + '", referencedColumnName="' + ${variable.reference.name.originalName} + '")')
#else
    #set($variableType = "${variable.type.javaName}")
    #set($column = '@Basic
    @Column(name="' + ${variable.orgName.originalName} + '"' + ${length} + ${nullity} + ')')
#end

    ${id}${autoGen}${column}
    public ${variableType} get${variable.name.parcelCaseName}()   {
        return this.${variable.name.camelCaseName};
    }

    public void set${variable.name.parcelCaseName}(${variableType} ${variable.name.camelCaseName})   {
        this.${variable.name.camelCaseName} = ${variable.name.camelCaseName};
    }
#end

#foreach(${reference} in ${classObject.references})

    @OneToMany(mappedBy = "${reference.refName.camelCaseName}", fetch = FetchType.LAZY)
    public List<${reference.name.parcelCaseName}Entity> get${reference.name.parcelCaseName}${reference.refName.parcelCaseName}s()   {
        return this.${reference.name.camelCaseName}${reference.refName.parcelCaseName}s;
    }

    public void set${reference.name.parcelCaseName}${reference.refName.parcelCaseName}s(List<${reference.name.parcelCaseName}Entity> ${reference.name.camelCaseName}${reference.refName.parcelCaseName}s)   {
    this.${reference.name.camelCaseName}${reference.refName.parcelCaseName}s = ${reference.name.camelCaseName}${reference.refName.parcelCaseName}s;
    }
#end

}