<?php

class Dto {

	public function bindXml(${H}app)	{
		${H}body = ${H}app->request()->getBody();
        ${H}xml = simplexml_load_string(${H}body);
        ${H}className = new ReflectionClass(${H}this);
		return ${H}this->bindXmlData(${H}xml,${H}className->getShortName(),${H}className->getMethods());
	}

	public function bindXmlData(${H}xml,${H}objClass,${H}objMthods)	{
		${H}obj = new ${H}objClass();
		foreach (${H}objMthods as ${H}medthod)	{
			${H}methodName = ${H}medthod->getName();
			${H}displayName = strtolower(ucwords(substr(${H}methodName,3,strlen(${H}methodName) - 3)));
			${H}getterName = 'get'.substr(${H}methodName,3);
			if (substr(${H}methodName,0,3) == "set")	{
				if (is_array(${H}obj->${H}getterName())) {
					${H}dtoName = trim(substr(${H}methodName,3),"s")."Dto";
					${H}dtoXmlName = strtolower(${H}dtoName);
					${H}child = new ${H}dtoName();
					${H}className = new ReflectionClass(${H}child);
					${H}data = array();
					foreach(${H}xml->${H}displayName->${H}dtoXmlName as ${H}childXml)	{
						array_push(${H}data,${H}this->bindXmlData(${H}childXml,${H}className->getShortName(),${H}className->getMethods()));
					}
				} else if(${H}obj->${H}getterName() instanceof Dto)	{
					${H}className = new ReflectionClass(${H}obj->${H}getterName());
					${H}displayName = ${H}displayName."dto";
					${H}data = ${H}this->bindXmlData(${H}xml->${H}displayName,${H}className->getShortName(),${H}className->getMethods());
				} else if(${H}obj->${H}getterName() instanceof DateTime)	{
					${H}data = new DateTime(${H}xml->${H}displayName);
				} else {
					${H}data = (string)${H}xml->${H}displayName;
				}
				${H}obj->${H}methodName(${H}data);
			}
		}
		return ${H}obj;
	}

	public function printData(${H}app)	{
		if (true)	{
			${H}this->printXml(${H}app);
		} else {
			${H}this->printJson(${H}app);
		}
	}

	public function printXml(${H}app)	{
		${H}res = ${H}app->response();
		${H}res['Content-Type'] = 'text/xml';

		${H}reflect = new \ReflectionClass(${H}this);
		${H}className = ${H}reflect->getShortName();
		${H}classVars = ${H}reflect->getMethods();
		${H}displayClassName = strtolower(${H}className);

		echo "<${H}displayClassName>";
		foreach (${H}classVars as ${H}classVar)	{
			${H}methodName = ${H}classVar->getName();
			if (substr(${H}methodName,0,3) == "get")	{
				${H}displayName = substr(${H}methodName,3,strlen(${H}methodName) - 3);
				${H}methodValue = ${H}this->${H}methodName();
				${H}displayName = strtolower(${H}displayName);
				if (${H}methodValue == null)	{
					echo "<${H}displayName>null</${H}displayName>";
				} else if (is_array(${H}methodValue)) {
					echo "<${H}displayName>";
					foreach (${H}methodValue as ${H}item) {
						${H}item->printXml(${H}app);
					}
					echo "</${H}displayName>";
				} elseif (${H}methodValue instanceof DateTime)	{
					${H}displayMethodValue = ${H}methodValue->format('Y-m-d H:i:s.0 T');
					echo "<${H}displayName>${H}displayMethodValue</${H}displayName>";
				} elseif (${H}methodValue instanceof Dto)	{
					${H}methodValue->printXml(${H}app);
				}  else 	{
					echo "<${H}displayName>${H}methodValue</${H}displayName>";
				}
			}
			
		}
		echo "</${H}displayClassName>";
	}

	public function printJson(${H}app)	{
		${H}res = ${H}app->response();
		${H}res['Content-Type'] = 'text/json';
		${H}class_name = get_class(${H}this);
		${H}class_vars = get_class_vars(${H}class_name);
		echo "{";
		foreach (${H}class_vars as ${H}name => ${H}value) {
			${H}this_value = ${H}this->${H}name;
			if (${H}this_value instanceof dto)	{
				${H}sub_class_name = get_class(${H}this->${H}name);
				echo "${H}sub_class_name : ";
				${H}this->${H}name->print_json(${H}app);
				echo ",";
			} else 	{
				echo "${H}name : '${H}this_value',";
			}
		}
		echo "}";
	}

}

?>