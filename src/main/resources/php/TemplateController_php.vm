<?php

require_once (${H}PROJ_PRESENTATION_DTO_ROOT.'${classObject.name.parcelCaseName}Dto.php');
require_once (${H}PROJ_PERSISTENCE_ENTITY_ROOT.'${classObject.name.parcelCaseName}Entity.php');
require_once (${H}PROJ_COMMON_BINDING_ROOT.'${classObject.name.parcelCaseName}Binding.php');

${H}app->get('/${classObject.name.lowerCaseName}s', function () use (${H}app) {
	global ${H}entityManager;
   	${H}${classObject.name.camelCaseName}Entities = ${H}entityManager->getRepository("${classObject.name.parcelCaseName}Entity")->findBy(array());
    ${H}${classObject.name.camelCaseName}s = bind${classObject.name.parcelCaseName}EntityArray(${H}${classObject.name.camelCaseName}Entities);
    ${H}${classObject.name.camelCaseName}s->printData(${H}app);
});

${H}app->get('/${classObject.name.lowerCaseName}s/:id', function (${H}id) use (${H}app) {
	global ${H}entityManager;
	${H}${classObject.name.camelCaseName}Entity = ${H}entityManager->find("${classObject.name.parcelCaseName}Entity", ${H}id);
	${H}${classObject.name.camelCaseName}Dto = bind${classObject.name.parcelCaseName}Entity(${H}${classObject.name.camelCaseName}Entity);
	${H}${classObject.name.camelCaseName}Dto->printData(${H}app);
});

${H}app->post('/${classObject.name.lowerCaseName}s', function () use (${H}app) {
	global ${H}entityManager;
	${H}${classObject.name.camelCaseName}Dto = new ${classObject.name.parcelCaseName}Dto();
	${H}${classObject.name.camelCaseName}Dto = ${H}${classObject.name.camelCaseName}Dto->bindXml(${H}app);
	${H}${classObject.name.camelCaseName}Entity = bind${classObject.name.parcelCaseName}Dto(${H}${classObject.name.camelCaseName}Dto);
	${H}entityManager->persist(${H}${classObject.name.camelCaseName}Entity);
	${H}entityManager->flush();
	${H}${classObject.name.camelCaseName}Dto = bind${classObject.name.parcelCaseName}Entity(${H}${classObject.name.camelCaseName}Entity);
	${H}${classObject.name.camelCaseName}Dto->printData(${H}app);
});

${H}app->post('/${classObject.name.lowerCaseName}s/list', function () use (${H}app) {
	global ${H}entityManager;
	${H}${classObject.name.camelCaseName}ListDto = new ${classObject.name.parcelCaseName}ListDto();
	${H}${classObject.name.camelCaseName}ListDto = ${H}${classObject.name.camelCaseName}ListDto->bindXml($app);
	${H}${classObject.name.camelCaseName}sArray = array();
	foreach (${H}${classObject.name.camelCaseName}ListDto->get${classObject.name.parcelCaseName}s() as ${H}${classObject.name.camelCaseName}Dto) {
		${H}${classObject.name.camelCaseName}Entity = bind${classObject.name.parcelCaseName}Dto(${H}${classObject.name.camelCaseName}Dto);
		${H}entityManager->persist(${H}${classObject.name.camelCaseName}Entity);
		${H}entityManager->flush();
		array_push(${H}${classObject.name.camelCaseName}sArray,bind${classObject.name.parcelCaseName}Entity(${H}${classObject.name.camelCaseName}Entity));
	}
	${H}${classObject.name.camelCaseName}ListDto = new ${classObject.name.parcelCaseName}ListDto();
	${H}${classObject.name.camelCaseName}ListDto->set${classObject.name.parcelCaseName}s(${H}${classObject.name.camelCaseName}sArray);
	${H}${classObject.name.camelCaseName}ListDto->printData(${H}app);
});

${H}app->put('/${classObject.name.lowerCaseName}s/:id', function (${H}id) use (${H}app) {
	global ${H}entityManager;
	${H}${classObject.name.camelCaseName}Entity = ${H}entityManager->find("${classObject.name.parcelCaseName}Entity", ${H}id);
	${H}entityManager->flush();
	${H}${classObject.name.camelCaseName}Dto = bind${classObject.name.parcelCaseName}Entity(${H}${classObject.name.camelCaseName}Entity);
	${H}${classObject.name.camelCaseName}Dto->printData(${H}app);
});

${H}app->delete('/${classObject.name.lowerCaseName}s/:id', function (${H}id) use (${H}app) {
	global ${H}entityManager;
	${H}${classObject.name.camelCaseName}Entity = ${H}entityManager->find("${classObject.name.parcelCaseName}Entity", ${H}id);
	${H}entityManager->remove(${H}${classObject.name.camelCaseName}Entity);
	${H}entityManager->flush();
});

/*Referances*/
#foreach(${reference} in ${classObject.references})

${H}app->get('/${classObject.name.lowerCaseName}s/:id/${reference.name.lowerCaseName}s', function (${H}id) use (${H}app) {
	global ${H}entityManager;
   	${H}${reference.name.camelCaseName}Entities = ${H}entityManager->getRepository("${reference.name.parcelCaseName}Entity")->findBy(array('${classObject.name.lowerCaseName}'=>$id));
    ${H}${reference.name.camelCaseName} = bind${reference.name.parcelCaseName}EntityArray(${H}${reference.name.camelCaseName}Entities);
    ${H}${reference.name.camelCaseName}->printData($app);
});
#end

?>